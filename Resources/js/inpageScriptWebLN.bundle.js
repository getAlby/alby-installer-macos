(()=>{"use strict";class e{constructor(){this.enabled=!1,this.isEnabled=!1,this.executing=!1}enable(){return this.enabled?Promise.resolve({enabled:!0}):this.execute("enable").then((e=>("boolean"==typeof e.enabled&&(this.enabled=e.enabled,this.isEnabled=e.enabled),e)))}getInfo(){if(!this.enabled)throw new Error("Provider must be enabled before calling getInfo");return this.execute("getInfo")}signMessage(e){if(!this.enabled)throw new Error("Provider must be enabled before calling signMessage");return this.execute("signMessageOrPrompt",{message:e})}verifyMessage(e,r){if(!this.enabled)throw new Error("Provider must be enabled before calling verifyMessage");throw new Error("Alby does not support `verifyMessage`")}makeInvoice(e){if(!this.enabled)throw new Error("Provider must be enabled before calling makeInvoice");return"object"!=typeof e&&(e={amount:e}),this.execute("makeInvoice",e)}sendPayment(e){if(!this.enabled)throw new Error("Provider must be enabled before calling sendPayment");return this.execute("sendPaymentOrPrompt",{paymentRequest:e})}sendTransaction(e,r){if(!this.enabled)throw new Error("Provider must be enabled before calling sendTransaction");throw new Error("Alby does not support `sendTransaction`")}getAddress(e,r,t){if(!this.enabled)throw new Error("Provider must be enabled before calling getAddress");throw new Error("Alby does not support `getAddress`")}request(e,r){if(!this.enabled)throw new Error("Provider must be enabled before calling request");return this.execute("request",{method:e,params:r})}execute(e,r){return new Promise(((t,n)=>{window.postMessage({application:"LBE",prompt:!0,action:`webln/${e}`,scope:"webln",args:r},"*"),window.addEventListener("message",(function e(r){r.data&&r.data.response&&"LBE"===r.data.application&&(r.data.data.error?n(new Error(r.data.data.error)):t(r.data.data.data),window.removeEventListener("message",e))}))}))}}class r{constructor(){this.enabled=!1,this.isEnabled=!1,this.executing=!1}enable(){return this.enabled?Promise.resolve({enabled:!0}):this.execute("enable").then((e=>("boolean"==typeof e.enabled&&(this.enabled=e.enabled,this.isEnabled=e.enabled),e)))}getInfo(){if(!this.enabled)throw new Error("Provider must be enabled before calling getInfo");return this.execute("getInfo")}lnurl(e){if(!this.enabled)throw new Error("Provider must be enabled before calling lnurl");return this.execute("lnurl",{lnurlEncoded:e})}sendPayment(e){if(!this.enabled)throw new Error("Provider must be enabled before calling sendPayment");return this.execute("sendPaymentOrPrompt",{paymentRequest:e})}keysend(e){if(!this.enabled)throw new Error("Provider must be enabled before calling keysend");return this.execute("keysendOrPrompt",e)}makeInvoice(e){if(!this.enabled)throw new Error("Provider must be enabled before calling makeInvoice");return"object"!=typeof e&&(e={amount:e}),this.execute("makeInvoice",e)}signMessage(e){if(!this.enabled)throw new Error("Provider must be enabled before calling signMessage");return this.execute("signMessageOrPrompt",{message:e})}verifyMessage(e,r){if(!this.enabled)throw new Error("Provider must be enabled before calling verifyMessage");throw new Error("Alby does not support `verifyMessage`")}request(e,r){if(!this.enabled)throw new Error("Provider must be enabled before calling request");return this.execute("request",{method:e,params:r})}execute(e,r){return new Promise(((t,n)=>{window.postMessage({application:"LBE",prompt:!0,action:`webln/${e}`,scope:"webln",args:r},"*"),window.addEventListener("message",(function e(r){r.data&&r.data.response&&"LBE"===r.data.application&&"webln"===r.data.scope&&(r.data.data.error?n(new Error(r.data.data.error)):t(r.data.data.data),window.removeEventListener("message",e))}))}))}}document&&(window.webln=new r,window.webbtc=new e)})();